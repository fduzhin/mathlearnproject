summary(fit)
fit <- glm(data=shuttle, I(1*(use=='auto')) ~ I(1*(wind=='head') - 1), family="binomial")
summary(fit)
fit <- glm(data=shuttle,( I(1*(use=='auto')) ~ I(1*(wind=='head'))-1 ), family="binomial")
summary(fit)
exp(0.2513)
exp(-0.2513)
exp(-0.03181)
exp(0.03181)
exp(-0.03181)
fit <- glm(data=shuttle, I(1*(use=='auto')) ~ I(1*(wind=='head') + magn ), family="binomial")
fit <- glm(data=shuttle, I(1*(use=='auto')) ~ I(1*(wind=='head')) + magn , family="binomial")
summary(fit)
exp(-3.201e-02)
1/exp(-3.201e-02)
fit <- glm(data=shuttle, I(1*(use=='auto')) ~ I(1*(wind=='head')) + magn -1, family="binomial")
summary(fit)
exp(-0.03201)
exp(0.03201)
fit <- glm(data=shuttle, I(1*(use=='auto')) ~ I(1*(wind=='head')) + magn, family="binomial")
summary(fit)
exp(-3.201e-02)
exp(0.03201)
exp(-3.201e-02)
fit <- glm(data=shuttle, I(1*(use=='auto')) ~ I(1*(wind=='head')) + magn,
family=binomial())
summary(fit)
fit <- glm(data=shuttle, I(1*(use=='auto')) ~ I(1*(wind=='tail')) + magn,
family=binomial())
summary(fit)
summary(fit)$coef
exp(3.200873e-02)
1/exp(3.200873e-02)
fit1 <- glm(data=shuttle, I(1*(use=='auto')) ~ I(1*(wind=='tail')),
family=binomial())
fit2 <- glm(data=shuttle, I(1*(use=='auto')) ~ I(1*(wind=='tail')) + magn,
family=binomial())
summary(fit1)$coef
summary(fit2)$coef
summary(fit2)$coef[1]
summary(fit2)$coef[2]
exp(summary(fit2)$coef[2])
exp(-summary(fit2)$coef[2])
summary(fit1)$coef
summary(fit1)$coef[2]
exp(summary(fit1)$coef[2])
exp(-summary(fit1)$coef[2])
exp(-summary(fit2)$coef[2])
fit1 <- glm(data=shuttle, I(1*(use=='auto')) ~ I(1*(wind=='head')),
family=binomial())
fit2 <- glm(data=shuttle, I(1*(use=='auto')) ~ I(1*(wind=='head')) + magn,
family=binomial())
exp(-summary(fit1)$coef[2])
exp(-summary(fit2)$coef[2])
exp(summary(fit1)$coef[2])
exp(summary(fit2)$coef[2])
fit3 <- glm(data=shuttle, I(1*(use=='auto')) ~ I(1*(wind=='head')) + magn ,
family=binomial())
exp(summary(fit3)$coef[2])
summary(fit3)
fit3 <- glm(data=shuttle, I(1*(use=='auto')) ~ I(1*(wind=='head')) + magn -1,
family=binomial())
summary(fit3)
exp(summary(fit3)$coef[1])
exp(summary(fit2)$coef[2])
exp(summary(fit1)$coef[2])
summary(fit2)
summary(fit3)
ummary(fit2)$coef[2]-summary(fit3)$coef[1]
summary(fit2)$coef[2]-summary(fit3)$coef[1]
data(instectSprays)
data(insectSprays)
data(InsectSprays)
head(InsectSprays)
fit <- glm(data=InsectSprays, count ~ spray),
family=poisson())
fit <- glm(data=InsectSprays, count ~ spray,
family=poisson())
summary(fit)
summary(fit)$[1]
summary(fit)$coef[1]
summary(fit)$coef[2]
exp(-summary(fit)$coef[2])
data(mtcars)
head(mtcars)
hru <- glm(data=mtcars, mpg ~ am + offset(hp), family=poisson)
wrnings()
warnings()
head(mtcars)
hru <- glm(data=mtcars, hp ~ am + offset(wt), family=poisson)
hru2 <- glm(data=mtcars, hp ~ am + offset(log(10)+wt), family=poisson)
summary(hru)$coef
summary(hru2)$coef
log(10)
summary(hru)$coef[1]-log(10)
summary(hru2)$coef[1]
library(sandwich)
install.packages("sandwich")
library(sandwich)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
df <- data.frame(x,y)
qplot(data=df, x=x, y=y)
library(ggplot2)
qplot(data=df, x=x, y=y)
knots <- 0
plineTerms<-sapply(knots,function(knot)(x>knot)*(x-knot))
splineTerms<-sapply(knots,function(knot)(x>knot)*(x-knot))
splineTerms
xMat<-cbind(1,x,splineTerms)
xMat
yhat<-predict(lm(y~xMat-1))
lot(x,y,frame=FALSE,pch=21,bg="lightblue",cex=2) lines(x,yhat,col="red",lwd=2)
plot(x,y,frame=FALSE,pch=21,bg="lightblue",cex=2)
lines(x,yhat,col="red",lwd=2)
triam <- lm(y~xMat)
summary(triam)
xMat
summary(triam)
xMat<-cbind(x,splineTerms)
xMat
triam <- lm(y~xMat)
summary(triam)
summary(triam)$coef
summary(triam)$coef[3]-summary(triam)$coef[2]
(summary(triam)$coef[3]+summary(triam)$coef[2])/2
library(caret)
library(kernlab)
library(e1071)
data(spam)
head(spam)
set.seed(32343)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
head(adData)
summary(adData)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
str(concrete)
S <- training
S$index <- 1:nrow(S)
cutAge <- cut2(training$Age,g=5)
table(cutAge)
S$factorAge <- cutAge
p1 <- ggplot(S, aes(y=CompressiveStrength, x=index, colour=cutAge)) + geom_point()
p1
Water
CoarseAggregate
FineAggregate
p1 <- ggplot(S, aes(y=CompressiveStrength, x=index, colour=flyAsh)) + geom_point()
p1
p1 <- ggplot(S, aes(y=CompressiveStrength, x=index, colour=FlyAsh)) + geom_point()
p1
p1 <- ggplot(S, aes(y=CompressiveStrength, x=index, colour=cutAge)) + geom_point()
p1
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
S <- training
S$index <- 1:nrow(S)
S$Superplasticizer
names(S)
S$logSuperplasticizer <- log(1+S$Superplasticizer)
p2 <- ggplot(S, aes(x=logSuperplasticizer)) + geom_histogram()
p2
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
relevant <- 58:69
help("preProcess")
preProc <- preProcess(training[,relevant],method="pca",thresh = 0.8)
summary(preProc)
preProc
head(training[,relevant])
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
relevant <- 58:69
help("preProcess")
preProc <- preProcess(training[,relevant],method="pca",thresh = 0.9)
summary(preProc)
preProc
library(caret)
library(AppliedPredictiveModeling)
library(e1071)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
modelFitAsIs <- train(training$diagnosis ~., method="glm",data=training[,relevant])
confusionMatrix(testing$diagnosis,predict(modelFitAsIs,testing[,relevant]))
preProc <- preProcess(training[,relevant],method="pca",thresh = 0.8)
trainPC <- predict(preProc,training[,relevant])
modelFitPCS <- train(training$diagnosis ~., method="glm",data=trainPC)
testPC <- predict(preProc,testing[,relevant])
confusionMatrix(testing$diagnosis,predict(modelFitPCA,testPC))
install.packages("shiny")
library(shiny)
install.packages("rCharts")
library(pgmm)
library(rpart)
data(olive)
library(caret)
data(olive)
str(olive)
head(olive)
olive = olive[,-1]
head(olive)
unique(olive$Area)
modFit <- train(Area ~ .,method="rpart",data=olive)
newdata = as.data.frame(t(colMeans(olive)))
newdata
predict(modFit,newdata=newdata)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
names(trainSA)
LogMod <- train(chd ~ alcohol + obesity + tobacco + typea + ldl,
method="glm", onset=age,data=trainSA)
print(LogMod)
names(trainSA)
set.seed(13234)
LogMod <- train(chd ~ alcohol + obesity +
tobacco + typea + ldl + age,
method="glm",data=trainSA)
print(LogMod)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA)
predTrain <- predict(LogMod,newdata=trainSA)
missClass(trainSA,predTrain)
predTrain <- predict(LogMod,newdata=testSA)
predTrain <- predict(LogMod,newdata=trainSA)
predTest <- predict(LogMod,newdata=testSA)
set.seed(13234)
LogMod <- train(chd ~ alcohol + obesity +
tobacco + typea + ldl + age,
method="glm",data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predTrain <- predict(LogMod,newdata=trainSA)
missClass(trainSA,predTrain)
predTest <- predict(LogMod,newdata=testSA)
missClass(testSA,predTest)
LogMod <- train(chd ~ alcohol + obesity +
tobacco + typea + ldl + age,
method="glm",family="binomial",data=trainSA)
print(LogMod)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predTrain <- predict(LogMod,newdata=trainSA)
missClass(trainSA,predTrain)
predTest <- predict(LogMod,newdata=testSA)
missClass(testSA,predTest)
names(trainSA)
LogMod <- train(chd ~ alcohol + obesity +
tobacco + typea + ldl,
method="glm",family="binomial",
onset=age, data=trainSA)
set.seed(13234)
LogMod <- train(chd ~ alcohol + obesity + age +
tobacco + typea + ldl,
method="glm",family="binomial",
data=trainSA)
print(LogMod)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predTrain <- predict(LogMod,newdata=trainSA)
missClass(trainSA,predTrain)
predTest <- predict(LogMod,newdata=testSA)
missClass(testSA,predTest)
set.seed(13234)
LogMod <- train(chd ~ alcohol + obesity + age +
tobacco + typea + ldl,
method="glm",family="binomial",
data=trainSA)
LogMod <- LogMod$finalModel
print(LogMod)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predTrain <- predict(LogMod,newdata=trainSA)
missClass(trainSA,predTrain)
predTest <- predict(LogMod,newdata=testSA)
missClass(testSA,predTest)
set.seed(13234)
LogMod <- train(chd ~ alcohol + obesity + age +
tobacco + typea + ldl,
method="glm",family="binomial",
data=trainSA)
LogMod <- LogMod$finalModel
print(LogMod)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predTrain <- predict(LogMod,newdata=trainSA)
missClass(trainSA,predTrain)
predTest <- predict(LogMod,newdata=testSA)
missClass(testSA,predTest)
predTrain <- predict(LogMod,newdata=trainSA)
missClass(trainSA$chd,predTrain)
predTest <- predict(LogMod,newdata=testSA)
missClass(testSA$chd,predTest)
missClass(testSA$chd,predTest)
missClass(trainSA$chd,predTrain)
set.seed(13234)
LogMod <- train(chd ~ alcohol + obesity + age +
tobacco + typea + ldl,
method="glm",family="binomial",
data=trainSA)
predTrain <- predict(LogMod,newdata=trainSA)
predTest <- predict(LogMod,newdata=testSA)
missClass(testSA$chd,predTest)
missClass(trainSA$chd,predTrain)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
class(vowel$y)
class(vowel.train$y)
vowel.train$y <- as.factor(vowel.train$y )
vowel.test$y <- as.factor(vowel.test$y)
class(vowel.train$y)
set.seed(33833)
Wood <- train(y~ .,data=tvowel.train,method="rf")
Wood <- train(y~ .,data=vowel.train,method="rf")
library(randomForest)
set.seed(33833)
Wood <- train(y~ .,data=vowel.train,method="rf")
?varImp
varImp(Wood)
set.seed(33833)
Wood <- train(y~ .,data=vowel.train,method="rf")
varImp(Wood)
?e1071
help("e1071")
library(e1071)
help("e1071")
dir()
setwd("/Users/orlenkoirina/Dropbox/Data Analysis with R/Mach learning project")
dir()
install.packages("rattle")
install.packages("rpart.plot")
library(ggplot2)
library(rpart)
library(caret)
library(rpart.plot)
library(rattle)
D <- read.csv("pml-training.csv")
T <- read.csv("pml-testing.csv")
dim(D)
summary(D)
names(D)
unique(D$classe)
training <- D[,8:160]
testing <- T[,8:159]
types <- data.frame(var=names(testing),type=as.character(lapply(testing,class)))
head(types)
head(testing[,1:8])
relevant_var <- (types$type=='numeric')|(types$type=='integer')
training <- training[,relevant_var]
training$classe <- D$classe
testing <- testing[,relevant_var]
dim(training)
dim(testing)
inTrain <- createDataPartition(y=training$classe,
p=0.7, list=FALSE)
train1 <- training[inTrain,]
test1 <- training[-inTrain,]
dim(train1)
modTree1 <- train(classe ~ ., method="rpart", data=train1)
fancyRpartPlot(modTree1$finalModel)
varImp(modTree1)
predict1 <- predict(modTree1,newdata=train1)
dim(predict1)
dim(train1)
dim(predict1)
predict1 <- predict(modTree1$finalModel,newdata=train1)
dim(predict1)
head(predict1)
head(round(predict1))
head(round(predict1),n=n100)
head(round(predict1),n=100)
confusionMatrix(predict1,train1$classe)
dim(predict1)
predict1$pred.class <- character(NULL)
predict1$pred.class <- character()
character()
predict1$pred.class <- "A"
head(round(predict1),n=100)
head(round(predict1))
head(predict1)
predict1 <- predict(modTree1$finalModel,newdata=train1)
dim(predict1)
head(max(predict1))
?which.max
head(which.max(predict1))
head(which.max(predict1[,]))
head(which.max(predict1[1,]))
head(which.max(predict1[2,]))
head(which.max(predict1[2,]))[1]
head(which.max(predict1[1000,]))
head(which.max(predict1[2000,]))
head(which.max(predict1[3000,]))
which.max(predict1[3000,])
class(which.max(predict1[3000,]))
A:E
"A":"E"
seq("A","E")
letters <- c("A","B","C","D","E")
letters
Hru <- integer(nrow(predict1))
dim(Hru)
Hru <- character(nrow(predict1))
nrow(Hru)
ncol(Hru)
head(Hru)
predict1[100,]
for i in 1:nrow(predict1) {
Hru[i] <- letters[which.max(predict1[i,])]
}
for (i in 1:nrow(predict1)) {
Hru[i] <- letters[which.max(predict1[i,])]
}
Hru[200:210]
predict1$pred.class <- as.factor(Hru)
confusionMatrix(predict1$pred.class,train1$classe)
levels(predict1$pred.class)
levels(train1$classe)
modGBM <- train(classe ~ ., method="gbm",data=train1)
predictGBM <- predict(modGBM, newdata=test1)
dim(predictGMB)
dim(predictGBM)
predictGBM <- predict(modGBM$finalModel, newdata=test1)
names(modGBM)
predictGBM <- predict(modGBM$finalModel, newdata=test1)
print(modGBM)
predictGBM <- predict(modGBM, newdata=test1)
dim(predictGBM)
str(predictGBM)
confusionMatrix(modGBM,train1$classe)
test
qplot(predictGBM,classe,data=testing)
qplot(predictGBM,classe,data=test1)
confusionMatrix(modGBM,test1$classe)
head(unlist(predictGBM))
confusionMatrix(unlist(modGBM),test1$classe)
Hru <- unlist(predictGBM)
class(Hru)
class(test1$classe)
confusionMatrix(Hru,test1$classe)
predict1 <- predict(modTree1$finalModel,newdata=train1)
dim(predict1)
predict1 <- predict(modTree1,newdata=train1)
dim(predict1)
dim(unlist(predict1))
head(predict1)
class(predict1)
confusionMatrix(predict1,train1$classe)
predict1 <- predict(modTree1,newdata=test1)
confusionMatrix(predict1,test1$classe)
varImp(modTree1)
important.var
important.var <- varImp(modTree1)
important.var
class(important.var)
head(important.var)
head(important.var$importatnce)
head(important.var$importance)
class(important.var$importance)
names(important.var$importance)
class(important.var)
important.var
row.names(important.var$importance)
?row.names
important.var$importance
row.names(important.var$importance)
important.var$importance
row.names(important.var$importance)[1:14]
good.var <- row.names(important.var$importance)[1:14]
good.var
class(good.var)
head(train1$good.var)
head(train1[,good.var])
subtrain1 <- train1[,good.var]
subtrain1$classe <- train1$classe
subtest1 <- test1[,good.var]
dim(subtrain1)
dim(subtest1)
library(randomForest)
modForest1 <- train(classe ~ ., method="rf", data=subtrain1)
