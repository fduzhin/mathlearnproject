someplot <- function(n) {
x <- rnorm(n)
y <- 0.5.*x+rnorm(n)
df <- data.frame(x,y)
qplot(data=df,x=x,y=y,geom=c("point","smooth"),method="lm")
}
someplot(4)
?function
qplot(data=df,x=x,y=y,geom=c("point","smooth"),method="lm")
someplot <- function(n) {
x <- rnorm(n)
y <- 0.5.*x+rnorm(n)
df <- data.frame(x,y)
qplot(data=df,x=x,y=y,geom=c("point","smooth"),method="lm")
}
someplot(4)
someplot <- function(n){
x <- rnorm(n)
y <- 0.5.*x+rnorm(n)
df <- data.frame(x,y)
qplot(data=df,x=x,y=y,geom=c("point","smooth"),method="lm")
}
someplot <- function(n){
x <- rnorm(n)
y <- 0.5*x+rnorm(n)
df <- data.frame(x,y)
qplot(data=df,x=x,y=y,geom=c("point","smooth"),method="lm")
}
someplot(4)
someplot(100)
manipulate(someplot(n), n = slider(50, 100, step = 1))
require(rCharts)
install.packages("rCharts")
install.packages("rCharts")
require(devtools)
install.packages("devtools")
require(devtools)
install_github('rCharts', 'ramnathv')
require(rCharts)
install.packages("Rtools")
haireye <- as.data.frame(HairEyeColor)
summary(haireye)
n1 <- nPlot(Freq~Hair, group='Eye', type='multiBarChart',
data=subset(haireye, Sex=='Male'))
n1$save('fig/n1.html',cdn=TRUE)
n1$save('fign1.html',cdn=TRUE)
cat('<iframe src="fign1.html" width=100%, height=600></iframe>')
dir()
n1
dir()
cd("data product playground")
setwd("data product playground" )
dir()
require(rCharts)
subDir <- "fig"
if !(file.exists(subDir)){
dir.create(subDir)
}
if (!file.exists(subDir)){
dir.create(subDir)
}
dir()
haireye <- as.data.frame(HairEyeColor)
summary(haireye)
n1 <- nPlot(Freq~Hair, group='Eye', type='multiBarChart',
data=subset(haireye, Sex=='Male'))
n1$save('fig/n1.html',cdn=TRUE)
cat('<iframe src="fig/n1.html" width=100%, height=600></iframe>')
n1
?cat
n1$
n1$html
summary(haireye)
n1 <- nPlot(Freq~Hair, group='Eye', type='multiBarChart',
data=subset(haireye, Sex=='Male'))
n1
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male, type = "multiBarChart")
n1$print("chart3")
n1
n1$print("chart3")
n1$html
n1$save('fig/n1.html',cdn=TRUE)
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye',
data = hair_eye, type = 'bar')
haireye <- as.data.frame(HairEyeColor)
summary(haireye)
n1 <- nPlot(Freq~Hair, group='Eye', type='multiBarChart',
data=subset(haireye, Sex=='Male'))
n1$save('fig/n1.html',cdn=TRUE)
n1
haireye <- as.data.frame(HairEyeColor)
n1 <- nPlot(Freq~Hair, group='Eye', type='multiBarChart',
data=subset(haireye, Sex=='Male'))
n1$save('fig/n1.html',cdn=TRUE)
n1
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male, type = "multiBarChart")
n1$print("chart3")
names(iris) = gsub("\\.","",names(iris))
names(iris) = gsub("\\.","",names(iris))
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data=iris,
color='Species', type='point')
r1
install.packages("googleVis")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
M
plot(M)
G <- gvisGeoChart(Exports, "Country", "Profit",options=list(width=200, height=100))
T1 <- gvisTable(Exports,options=list(width=200, height=270))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=400, height=370))
GT <- gvisMerge(G,T1, horizontal=FALSE)
GTM <- gvisMerge(GT, M, horizontal=TRUE,tableOptions="bgcolor=\"#CCCCCC\" cellspacing=10")
plot(GTM)
demo(googleVis)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='theodor',
token='386DB2B3ABE9B7E0F52CB9AEB416BB5F',
secret='<SECRET>')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='theodor',
token='386DB2B3ABE9B7E0F52CB9AEB416BB5F',
secret='<SECRET>')
shinyapps::setAccountInfo(name='theodor', token='386DB2B3ABE9B7E0F52CB9AEB416BB5F', secret='B0TmltWvS2SeyX8xBoet0UPP4oqbf947yf+RfM51')
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
shinyapps::deployApp('C:\\Users\\fduzhin\\Documents\\Data analysis\\shiny project')
shinyapps::deployApp('C:\\Users\\fduzhin\\Documents\\Data analysis\\shiny project')
setwd("C:\\Users\\fduzhin\\Documents\\Data analysis\\shiny project")
runApp()
library(shiny)
library(shiny)
install.packages("shiny")
library(shiny)
install.packages("shiny")
install.packages("shiny")
shinyapps::deployApp('C:\\Users\\fduzhin\\Documents\\Data analysis\\shiny project')
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
someplot <- function(n){
x <- rnorm(n)
y <- 0.5*x+rnorm(n)
df <- data.frame(x,y)
qplot(data=df,x=x,y=y,geom=c("point","smooth"),method="lm")
}
manipulate(someplot(n), n = slider(50, 100, step = 1))
library(ggplot2)
someplot <- function(n){
x <- rnorm(n)
y <- 0.5*x+rnorm(n)
df <- data.frame(x,y)
qplot(data=df,x=x,y=y,geom=c("point","smooth"),method="lm")
}
manipulate(someplot(n), n = slider(50, 100, step = 1))
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
summary(cars)
cars
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myplot(0.2)
myPlot(0.2)
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
someplot <- function(n){
x <- rnorm(n)
y <- 0.5*x+rnorm(n)
df <- data.frame(x,y)
qplot(data=df,x=x,y=y,geom=c("point","smooth"),method="lm")
}
manipulate(someplot(n), n = slider(50, 100, step = 1))
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
d <- data.frame(airquality, stringsAsFactors = FALSE)
print(d)
d
dir()
runApp()
install.packages("shiny")
install.packages("shiny")
install.packages("C:/Users/fduzhin/Downloads/shiny_0.10.2.2.zip", repos = NULL)
library(shiny)
runApp()
install.packages("UsingR")
runApp()
runApp()
runApp()
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
myPlot(0.2)
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
qplot(data=cars, x=dist - mean(dist), y=speed - mean(speed))
qplot(data=cars, x=dist - mean(dist), y=speed - mean(speed),geom="point")
qplot(data=cars, x=dist-mean(dist), y=speed-mean(speed),geom="point")
mean(cars$dist)
cars$dist
cars
library(manipulate)
myPlot <- function(s) {
plot(cars$disp - mean(cars$disp), cars$drat - mean(cars$drat))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.github('slidify','ramnathv')
library(devtools)
install.github('slidify','ramnathv')
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
author("first_deck")
setwd("C:\\Users\\fduzhin\\Documents\\Data analysis")
dir()
library(ggplot2)
data(iris)
names(iris)
table(iris$Species)
library(caret)
install.packages("caret")
library(caret)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSe)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testomg <- iris[-inTrain,]
testing <- iris[-inTrain,]
dim(training)
dim(testing)
qplot(Petal.Width, Sepal.Width, colour=Species, data=training)
modFit <- train(Species ~., method="rpart", data=training)
print(modFit$finalModel)
install.packages("e1071")
library("e1071")
modFit <- train(Species ~., method="rpart", data=training)
print(modFit$finalModel)
plot(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=1.5)
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=1.5)
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=1)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
?fancyRpartPlot
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
predict(modFit,newdata=testing)
predict(modFit,newdata=testing)==testing$Species
predict(modFit,newdata=testing)==testing$Species
sum(predict(modFit,newdata=testing)==testing$Species)/nrow(testing)
dir()
df <- read.csv("mh1800_marks.csv")
names(df)
hist(df$Exam.marks)
hist(as.numeric(df$Exam.marks))
mean(as.numeric(df$Exam.marks))
median(as.numeric(df$Exam.marks))
df <- read.csv("mh1800_marks.csv",na="ABS")
df
names(df)
df$Exam.marks
mean(df$Exam.marks)
?mean
mean(df$Exam.marks,na.rm=FALSE)
mean(df$Exam.marks,na.rm=TRUE)
hist(df$Exam.marks,na.rm=TRUE)
?hist
qplot(data=df,x=Exam.marks,aes="hist")
qplot(data=df,x=Exam.marks,aes="hist",binwidth=5)
qplot(data=df,x=Exam.marks,aes="hist",binwidth=10)
qplot(data=df,x=Exam.marks,aes="hist",binwidth=100/15)
qplot(data=df,x=Exam.marks,aes="hist",binwidth=100/12)
qplot(data=df,x=Exam.marks,aes="hist",binwidth=100/20)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(ozone,packages=ElemStatLearn)
data(ozone,package="ElemStatLearn")
head(ozone)
dim(ozone)
summary(ozone)
str(ozone)
ll <- matrix(NA,nrow=10,ncol=155)
data(iris); library(ggplot2)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
library(caret)
library(e1071)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training)
dim(testing)
modFit <- train(Species~ .,data=training,method="rf",prox=TRUE)
modFit <- train(Species~ .,data=training,method="rf",prox=TRUE)
tesmodFit
modFit
getTree(modFit$finalModel,k=2)
irisP <- classCenter(training[,c(3,4)], training$Species, modFit$finalModel$prox)
irisP <- as.data.frame(irisP); irisP$Species <- rownames(irisP)
p <- qplot(Petal.Width, Petal.Length, col=Species,data=training)
p + geom_point(aes(x=Petal.Width,y=Petal.Length,col=Species),size=5,shape=4,data=irisP)
summary(irisP)
irisP
pred <- predict(modFit,testing);
testing$predRight <- pred==testing$Species
table(pred,testing$Species)
qplot(Petal.Width,Petal.Length,colour=predRight,data=testing,main="newdata Predictions")
qplot(Petal.Width,Petal.Length,colour=predRight,
data=testing,main="newdata Predictions",
size=10)
install.packages("gbm")
install.packages("mboost")
install.packages("ada")
install.packages("gamBoost")
install.packages("GAMBoost")
library(ISLR);
install.packages("ISLR")
library(ISLR);
data(Wage);
Wage <- subset(Wage,select=-c(logwage))
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,]
names(Wage)
modFit <- train(wage ~ ., method="gbm",data=training,verbose=FALSE)
library("gbm")
modFit <- train(wage ~ ., method="gbm",data=training,verbose=FALSE)
print(modFit)
qplot(predict(modFit,testing),wage,data=testing)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
str(segmentationOriginal)
S <- segmentationOriginal
training <- S[S$Sase=="Train",]
testing <- S[S$Sase=="Test",]
training <- subset(training,select=-c(Case))
testing <- subset(testing,select=-c(Case))
str(training)
training <- S[S$Case=="Train",]
training <- subset(training,select=-c(Case))
str(training)
dim(training)
dim(S)
dim(testing)
testing <- S[S$Case=="Test",]
testing <- subset(testing,select=-c(Case))
dim(testing)
sed.seed(125)
set.seed(125)
names(S)
modFit <- train(Class ~ ., method="rpart",data=training,verbose=FALSE)
Hru <- predict(modFit,testing)
print(modFit)
dim(training)
dim(testing)
qplot(predict(modFit,testing),Class,data=testing)
table(predict(modFit,testing),testing$Class)
names(training)
names(testing)
names(training)==names(testing)
data(segmentationOriginal)
S <- segmentationOriginal
dim(S)
training <- S[S$Case=="Train",]
training <- subset(training,select=-c(Case))
dim(training)
testing <- S[S$Case=="Test",]
testing <- subset(testing,select=-c(Case))
dim(testing)
set.seed(125)
modFit <- train(Class ~ ., method="rpart",data=training,verbose=FALSE)
warnings()
print(modFit)
Hru <- predict(modFit,testing)
modFit <- train(Class ~ ., method="rpart",data=training,verbose=FALSE)
modFit
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
S <- segmentationOriginal
dim(S)
training <- S[S$Case=="Train",]
training <- subset(training,select=-c(Case))
dim(training)
testing <- S[S$Case=="Test",]
testing <- subset(testing,select=-c(Case))
dim(testing)
set.seed(125)
modFit <- train(Class ~ ., method="rpart",data=training,verbose=FALSE)
modFit
library(rpart)
set.seed(125)
modFit <- train(Class ~ ., method="rpart",data=training,verbose=FALSE)
modFit <- train(Class ~ ., method="rpart",data=training)
print(modFit)
qplot(predict(modFit,testing),Class,data=testing)
table(predict(modFit,testing),testing$Class)
modFit
plot(modFit)
Hru
Hru <- predict(modFit,testing)
Hru
T <- testing
T$Hru <- Hru
T[T$TotalIntench2 ==23000,]
a <- (T$TotalIntench2 ==23000)&(T$FiberWidthCh1 == 10)&(T$PerimStatusCh1==2)
T[a,]
a
a <- (T$TotalIntench2 ==23000)&(T$FiberWidthCh1 == 10)
T[a,]
a
a <- (T$TotalIntench2 ==23000)
a
T$TotalIntench2 ==23000
T
T$TotalIntench2
names(T)
T$TotalIntenCh2
names(T)
T$FiberWidthCh1
T$TotalIntenCh2==23000
sum(T$TotalIntenCh2==23000)
sum(training$TotalIntenCh2==23000)
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
fancyRpartPlot(modFit$finalModel)
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
library(caret)
library(e1071)
library(rattle)
library(rpart.plot)
library(ElemStatLearn)
library(ggplot2)
fancyRpartPlot(modFit$finalModel)
library(ggplot2)
library(rpart)
library(caret)
library(rpart.plot)
library(rattle)
library(randomForest)
#Windows"
setwd("C:\\Users\\fduzhin\\Desktop\\Dropbox\\Data Analysis with R\\Mach learning project")
D <- read.csv("pml-training.csv")
T <- read.csv("pml-testing.csv")
dim(D)
summary(D)
names(D)
unique(D$classe)
training <- D[,8:160]
testing <- T[,8:159]
types <- data.frame(var=names(testing),type=as.character(lapply(testing,class)))
head(types)
head(testing[,1:8])
relevant_var <- (types$type=='numeric')|(types$type=='integer')
training <- training[,relevant_var]
training$classe <- D$classe
testing <- testing[,relevant_var]
dim(training)
dim(testing)
